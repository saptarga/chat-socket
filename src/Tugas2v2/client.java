/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tugas2v2;

import Config.Koneksi;

import com.mysql.jdbc.PreparedStatement;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author saptarga
 */
public class client extends javax.swing.JFrame {

    static boolean connected;
    static boolean logout;
    static Socket cSocket;
    static PrintWriter out;
    static BufferedReader in;
    public Date date1;
    public SimpleDateFormat dateFormatter;
    //static userInput uinput;
    static readFromServer sinput;
    static DefaultListModel list;
    public static String nick;
    static String server;
    static Connection conn = Koneksi.getKoneksi();

    static String read() {
        String s = null;
        try {
            s = in.readLine();
        } catch (Exception e) {
            System.out.println(e);
        }
        return s;
    }

    /**
     * Creates new form client
     */
    public client() {
        initComponents();
        setTitle("Program Fakorial");
        list = new DefaultListModel();
        list.addElement("Not Connected");
        UserList.setModel(list);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        UserList = new javax.swing.JList();
        MessageTxt = new javax.swing.JTextField();
        SendBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        LblUser = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMHelp = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainText.setEditable(false);
        mainText.setBackground(new java.awt.Color(254, 254, 254));
        mainText.setColumns(20);
        mainText.setRows(5);
        jScrollPane1.setViewportView(mainText);

        UserList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "item 1" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        UserList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(UserList);

        SendBtn.setText("Send");
        SendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("User Online : ");

        LblUser.setText("User : ---");

        jMenu2.setText("Login");

        jMenuItem1.setText("Connect");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setText("Disconnect");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMHelp.setText("Help");
        jMHelp.setEnabled(false);

        jMenuItem3.setText("Daftar Mahasiswa (@Info mhs)");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem3MouseClicked(evt);
            }
        });
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMHelp.add(jMenuItem3);

        jMenuItem4.setText("Daftar Mahasiswa Berdasarkan NIM (@Info mhs+nim)");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem4MouseClicked(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMHelp.add(jMenuItem4);

        jMenuBar1.add(jMHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(MessageTxt)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                    .addComponent(LblUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SendBtn)
                            .addComponent(jLabel1))
                        .addGap(0, 52, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MessageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SendBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(LblUser))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                        .addGap(47, 47, 47)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UserListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserListMouseClicked
        // TODO add your handling code here:
        if (connected && (!UserList.getSelectedValue().equals(nick))) {
            String msg = JOptionPane.showInputDialog(null, "Private Message:");
            if (msg != null) {
                send("PrivatePost " + replace(msg, " ", "<") + "," + replace((String) UserList.getSelectedValue(), " ", "<"));
                System.out.println("PrivatePost " + replace(msg, " ", "<") + "," + replace((String) UserList.getSelectedValue(), " ", "<"));
                
            }
            //System.out.println(UserList.getSelectedValue());
        }
    }//GEN-LAST:event_UserListMouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        send("Logout");
        
        client.logout = true;
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        setTitle("Connecting ...");
        logout = false;
        sinput = new readFromServer(this);
        //uinput = new userInput();
        cSocket = null;
        out = null;
        in = null;
        boolean error;
        error = false;
        server = JOptionPane.showInputDialog("Server: ", "localhost");
        try {
            cSocket = new Socket(server, 2222);
            out = new PrintWriter(cSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));
            date1 = new Date();
            dateFormatter = new SimpleDateFormat("yyyy-mm-dd hh:mm:ss");
            //uinput.start();
            sinput.start();
        } catch (UnknownHostException e) {
            JOptionPane.showMessageDialog(this, "No server isfound", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.out.println("Host Error" + e);
            setTitle("Simple Java Chat - Cannot Connect Please Tryanother server");
            error = true;
        } catch (IOException e) {
            System.out.println("IOException" + e);
        }
        if (!error) {
            nick = null;
            nick = JOptionPane.showInputDialog(null, "NickName: ");
            if ("".equals(nick)){
                while (nick.contains(";")) {
                    nick = JOptionPane.showInputDialog(null, "Input Nickname \";\".Cannot be null .");
                }
            }
            send("Login: " + replace(nick, " ", "<"));
            System.out.println("Login: " + replace(nick, " ", "<"));
            if (nick != null) {
                jMenuItem1.setEnabled(false);
                jMenuItem2.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void SendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendBtnActionPerformed
        // TODO add your handling code here:
        sendInput();
    }//GEN-LAST:event_SendBtnActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        MessageTxt.setText("@Info mhs");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        MessageTxt.setText("@Info mhs+Masukan Nim Mahasiswa");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem3MouseClicked

    private void jMenuItem4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new client().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel LblUser;
    private javax.swing.JTextField MessageTxt;
    private javax.swing.JButton SendBtn;
    private javax.swing.JList UserList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    public javax.swing.JMenu jMHelp;
    public javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JMenuItem jMenuItem1;
    public javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea mainText;
    // End of variables declaration//GEN-END:variables

    public void send(String msg) {
        out.println(msg);
        System.out.println(msg);
    }

    private void sendInput() {
        if (!connected) {
            JOptionPane.showMessageDialog(this, "Not connected! Actions -Connect", "Error", JOptionPane.ERROR_MESSAGE);
            MessageTxt.setText("");
        } else if (MessageTxt.getText().equals("") || MessageTxt.getText().equals("\n") || MessageTxt.getText() == null) {
            MessageTxt.setText("");
        } else {
            String msg;
            msg = MessageTxt.getText();
            if (msg.startsWith("@Info")) {
                send("Info " + replace(MessageTxt.getText(), "\n", " ")+","+nick);
            } else {
                send("Post " + replace(MessageTxt.getText(), "\n", " "));
            }
            MessageTxt.setText("");
            
        }
    }

    private String replace(String str, String pattern, String replace) {
        int s = 0;
        int e = 0;
        StringBuffer result = new StringBuffer();
        while ((e = str.indexOf(pattern, s)) >= 0) {
            result.append(str.substring(s, e));
            result.append(replace);
            s = e + pattern.length();
        }
        result.append(str.substring(s));
        return result.toString();
    }
}
